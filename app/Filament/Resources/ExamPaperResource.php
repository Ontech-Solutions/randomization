<?php

namespace App\Filament\Resources;

use App\Filament\Resources\ExamPaperResource\Pages;
use App\Models\ExamPaper;
use App\Models\Program;
use App\Models\User;
use Filament\Forms;
use Filament\Forms\Form;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Builder;

class ExamPaperResource extends Resource
{
    protected static ?string $model = ExamPaper::class;

    protected static ?string $navigationIcon = 'heroicon-c-printer';

    protected static ?string $navigationGroup = 'Generated Papers';

    protected static ?int $navigationSort = 1;

    public static function getEloquentQuery(): Builder
    {
        $query = parent::getEloquentQuery();

        // Removed 'province_id' from select and groupBy clauses
        return $query->select('id', 'ref_number', 'program_id', 'year', 'month', 'image', 'question', 'exam_sitting_date', 'option_a', 'option_b', 'option_c', 'option_d', 'option_e', 'correct_answer', 'user_id', 'created_at', 'updated_at')
            ->groupBy('ref_number')
            ->orderBy('updated_at', 'desc');
    }

    public static function shouldRegisterNavigation(): bool
    {
        return checkReadExamPaperPermission();
    }

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                Forms\Components\Placeholder::make('')
                    ->content(function (ExamPaper $record) {
                        $exam_questions = ExamPaper::where('ref_number', $record->ref_number)->get();
                        return view('exam-paper-view', compact('exam_questions'));
                    })
                    ->columnSpanFull()
            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                Tables\Columns\TextColumn::make('ref_number')
                    ->label("Reference Number")
                    ->searchable()->sortable(),
                Tables\Columns\TextColumn::make("program_id")
                    ->label("Program")
                    ->formatStateUsing(function ($record){
                        // Fetch program name by program_id
                        return Program::where('id', $record->program_id)->first()->name ?? "";
                    }),
                Tables\Columns\TextColumn::make('exam_sitting_date')
                    ->label("Sitting Date/Time")
                    ->dateTime()
                    ->searchable()->sortable(),
                Tables\Columns\TextColumn::make('user_id')
                    ->formatStateUsing(function ($state){
                        // Fetch user name by user_id
                        return User::where("id", $state)->first()->name ?? "";
                    })
                    ->label("Generated By")
                    ->searchable()->sortable(),
                Tables\Columns\TextColumn::make('updated_at')
                    ->label('Generated At')
                    ->dateTime()
            ])
            ->filters([
                // You can add other filters here if needed
            ])
            ->actions([
                Tables\Actions\EditAction::make()->label("View"),
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    // You can enable bulk actions here if needed
                ]),
            ]);
    }

    public static function getRelations(): array
    {
        return [
            // Define relations here if needed
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListExamPapers::route('/'),
            // 'create' => Pages\CreateExamPaper::route('/create'), // Uncomment if you need a create page
            'edit' => Pages\EditExamPaper::route('/{record}/edit'),
        ];
    }
}
